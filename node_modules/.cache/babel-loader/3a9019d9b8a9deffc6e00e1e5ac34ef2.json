{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/src/views/Gym/GymStatistics.js\";\nimport React from 'react';\nimport { useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { titleCase } from '../../assets/styles/masterStyle.js';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport MaterialTable from 'material-table';\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport styles from '../../assets/styles/views/gym/gymstatisticsStyle.js';\nimport { icons } from '../../assets/styles/masterStyle.js';\nimport GymGraph from './GymGraph.js';\nimport routineJson from '../../assets/data/workoutRoutine.json'; // data\n\nimport workoutData from '../../assets/data/gymData.json';\nimport workoutJson from '../../assets/data/workouts.json';\nconst useStyles = makeStyles(styles); // Functions for tab panel\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-auto-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-auto-tab-${index}`\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), value === index && /*#__PURE__*/React.createElement(Box, {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, children));\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`\n  };\n} // Functions for display \n\n\nconst countGymDays = () => {\n  let days = [];\n  workoutData.map(workout => {\n    workout.data.map(day => {\n      if (!days.includes(day.date)) {\n        days.push(day.date);\n      }\n    });\n  });\n  return days.length;\n};\n\nconst options = workoutData.map(option => {\n  return {\n    name: titleCase(option.workout.name),\n    group: titleCase(option.workout.musclegroup),\n    ...option\n  };\n});\nexport default function GymStatistics(props) {\n  const classes = useStyles(); // states \n\n  const targetRef = useRef(); //states \n\n  const [state, setState] = React.useState({\n    tabIndex: 0,\n    cardIndex: 0,\n    selectedData: null,\n    personalbest: []\n  });\n\n  const handleAutoComplete = (event, values) => {\n    setState({ ...state,\n      selectedData: values\n    });\n  }; // react state for tabs \n\n\n  const handleTabChange = (event, index) => [setState({ ...state,\n    tabIndex: index\n  })];\n\n  React.useEffect(() => {\n    if (state.selectedData !== null) {\n      let pb;\n      let maxWeight = 0;\n      state.selectedData.data.map(workout => {\n        if (workout.weight > maxWeight) {\n          pb = workout;\n        } else if (workout.weight === maxWeight) {\n          if (moment(workout.date).isBefore(moment(pb.date))) {\n            pb = workout;\n          }\n        }\n      });\n      setState({ ...state,\n        personalbest: pb\n      });\n    } else {\n      setState({ ...state,\n        personalbest: []\n      });\n    }\n  }, [state.selectedData]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.container,\n    spacing: 5,\n    style: {\n      zoom: \"0.9\",\n      height: \"90vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    style: {\n      padding: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: state.tabIndex,\n    onChange: handleTabChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    variant: \"scrollable\",\n    scrollButtons: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Tab, Object.assign({\n    className: classes.tab,\n    label: \"2 Weeks\"\n  }, a11yProps(0), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Tab, Object.assign({\n    className: classes.tab,\n    label: \"1 Month\"\n  }, a11yProps(1), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Tab, Object.assign({\n    className: classes.tab,\n    label: \"3 Months\"\n  }, a11yProps(2), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Tab, Object.assign({\n    className: classes.tab,\n    label: \"Custom\"\n  }, a11yProps(3), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(TabPanel, {\n    value: state.tabIndex,\n    index: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(GymGraph, {\n    data: state.selectedData,\n    theme: props.theme,\n    start: moment().subtract(14, 'days'),\n    end: moment(),\n    selectedData: state.selectedData,\n    type: 'days',\n    amount: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(TabPanel, {\n    value: state.tabIndex,\n    index: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(GymGraph, {\n    data: state.selectedData,\n    theme: props.theme,\n    start: moment().subtract(1, 'months'),\n    end: moment(),\n    selectedData: state.selectedData,\n    type: 'months',\n    amount: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(TabPanel, {\n    value: state.tabIndex,\n    index: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(GymGraph, {\n    data: state.selectedData,\n    theme: props.theme,\n    start: moment().subtract(3, 'months'),\n    end: moment(),\n    selectedData: state.selectedData,\n    type: 'months',\n    amount: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(TabPanel, {\n    value: state.tabIndex,\n    index: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    limitTags: 1,\n    options: options.sort((a, b) => -b.group.localeCompare(a.group)),\n    id: \"multiple-limit-tags\",\n    groupBy: option => option.group,\n    getOptionLabel: option => option.name,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Workouts\",\n      placeholder: \"Workout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    })),\n    onChange: handleAutoComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {\n      height: \"20vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.typo,\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 33\n    }\n  }, \" One Rep Max \"), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.daysTypo,\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 33\n    }\n  }, \" \", countGymDays(), \" \")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {\n      height: \"20vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.typo,\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 33\n    }\n  }, \" Personal Best \"), state.personalbest.length === 0 ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.daysTypo,\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 37\n    }\n  }, \" No Workout Selected \") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    display: \"inline\",\n    className: classes.daysTypo,\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 45\n    }\n  }, state.personalbest.weight, \" lbs\"), /*#__PURE__*/React.createElement(Typography, {\n    display: \"inline\",\n    className: classes.typo,\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 45\n    }\n  }, \"/ \", state.personalbest.rep, \" reps\")), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.typo,\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 41\n    }\n  }, \"Set on - \", state.personalbest.date))))))));\n  {\n    /* <Grid ref={targetRef} className={classes.gymContainer} item xs={(props.tabIndex === 0) ? 8 : 12} >\n               {createTabPanel()}\n           </Grid>\n           <Grid className={classes.gymSelection} item xs={4}>\n              \n           </Grid> */\n  }\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/src/views/Gym/GymStatistics.js"],"names":["React","useRef","useLayoutEffect","PropTypes","moment","titleCase","makeStyles","useTheme","Box","AppBar","Tabs","Tab","Card","CardActionArea","CardActions","CardContent","Typography","Autocomplete","TextField","MaterialTable","Grid","useMediaQuery","styles","icons","GymGraph","routineJson","workoutData","workoutJson","useStyles","TabPanel","props","children","value","index","other","height","propTypes","node","any","isRequired","a11yProps","id","countGymDays","days","map","workout","data","day","includes","date","push","length","options","option","name","group","musclegroup","GymStatistics","classes","targetRef","state","setState","useState","tabIndex","cardIndex","selectedData","personalbest","handleAutoComplete","event","values","handleTabChange","useEffect","pb","maxWeight","weight","isBefore","container","zoom","padding","tab","theme","subtract","width","margin","sort","a","b","localeCompare","params","typo","daysTypo","display","justifyContent","alignItems","rep"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useRef, useLayoutEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport {\n    titleCase\n} from '../../assets/styles/masterStyle.js';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport MaterialTable from 'material-table';\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport styles from '../../assets/styles/views/gym/gymstatisticsStyle.js';\n\nimport { icons } from '../../assets/styles/masterStyle.js';\nimport GymGraph from './GymGraph.js';\nimport routineJson from '../../assets/data/workoutRoutine.json';\n\n// data\nimport workoutData from '../../assets/data/gymData.json';\nimport workoutJson from '../../assets/data/workouts.json';\n\nconst useStyles = makeStyles(styles);\n\n// Functions for tab panel\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box style={{ height: \"100%\" }}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n}\n\n// Functions for display \nconst countGymDays = () => {\n    let days = [];\n    workoutData.map(workout => {\n        workout.data.map(day => {\n            if (!days.includes(day.date)) {\n                days.push(day.date)\n            }\n        })\n    })\n    return days.length;\n}\n\nconst options = workoutData.map((option) => {\n    return {\n        name: titleCase(option.workout.name), group: titleCase(option.workout.musclegroup),\n        ...option\n    };\n});\n\nexport default function GymStatistics(props) {\n    const classes = useStyles();\n    // states \n    const targetRef = useRef();\n    //states \n    const [state, setState] = React.useState({\n        tabIndex: 0,\n        cardIndex: 0,\n        selectedData: null,\n        personalbest: []\n    })\n    const handleAutoComplete = (event, values) => {\n        setState({ ...state, selectedData: values });\n    }\n    // react state for tabs \n    const handleTabChange = (event, index) => [\n        setState({ ...state, tabIndex: index })\n    ];\n\n    React.useEffect(() => {\n        if (state.selectedData !== null) {\n            let pb;\n            let maxWeight = 0;\n            state.selectedData.data.map(workout => {\n                if (workout.weight > maxWeight) {\n                    pb = workout;\n                } else if (workout.weight === maxWeight) {\n                    if (moment(workout.date).isBefore(moment(pb.date))) {\n                        pb = workout;\n                    }\n                }\n            })\n            setState({ ...state, personalbest: pb })\n        } else {\n            setState({ ...state, personalbest: [] })\n        }\n    }, [state.selectedData])\n\n    return (\n        <Grid\n            container\n            className={classes.container}\n            spacing={5}\n            style={{ zoom: \"0.9\", height: \"90vh\" }}\n        >\n            <Grid item xs={7}>\n                <Card>\n                    <CardContent style={{ padding: \"0px\" }}>\n                        <AppBar position=\"static\" color=\"default\">\n                            <Tabs\n                                value={state.tabIndex}\n                                onChange={handleTabChange}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                variant=\"scrollable\"\n                                scrollButtons=\"auto\"\n                            >\n                                <Tab className={classes.tab} label=\"2 Weeks\" {...a11yProps(0)} />\n                                <Tab className={classes.tab} label=\"1 Month\" {...a11yProps(1)} />\n                                <Tab className={classes.tab} label=\"3 Months\" {...a11yProps(2)} />\n                                <Tab className={classes.tab} label=\"Custom\" {...a11yProps(3)} />\n                            </Tabs>\n                        </AppBar>\n                        <TabPanel value={state.tabIndex} index={0} >\n                            <GymGraph\n                                data={state.selectedData}\n                                theme={props.theme}\n                                start={moment().subtract(14, 'days')}\n                                end={moment()}\n                                selectedData={state.selectedData}\n                                type={'days'}\n                                amount={14}\n                            />\n                        </TabPanel>\n                        <TabPanel value={state.tabIndex} index={1} >\n                            <GymGraph\n                                data={state.selectedData}\n                                theme={props.theme}\n                                start={moment().subtract(1, 'months')}\n                                end={moment()}\n                                selectedData={state.selectedData}\n                                type={'months'}\n                                amount={1}\n                            />\n                        </TabPanel>\n                        <TabPanel value={state.tabIndex} index={2}>\n                            <GymGraph\n                                data={state.selectedData}\n                                theme={props.theme}\n                                start={moment().subtract(3, 'months')}\n                                end={moment()}\n                                selectedData={state.selectedData}\n                                type={'months'}\n                                amount={3}\n                            />\n                        </TabPanel>\n                        <TabPanel value={state.tabIndex} index={3}>\n\n                        </TabPanel>\n\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={5} ref={targetRef}>\n                <Grid\n                    container\n                    spacing={5}\n                    style={{ height: \"100%\", width: \"100%\", margin: \"0px\" }}\n                >\n                    <Grid item xs={12}>\n                        <Autocomplete\n                            limitTags={1}\n                            options={options.sort((a, b) => -b.group.localeCompare(a.group))}\n                            id=\"multiple-limit-tags\"\n                            groupBy={(option) => option.group}\n                            getOptionLabel={(option) => option.name}\n                            renderInput={(params) => (\n                                <TextField {...params} variant=\"outlined\" label=\"Workouts\" placeholder=\"Workout\" />\n                            )}\n                            onChange={handleAutoComplete}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card style={{ height: \"20vh\" }}>\n                            <CardContent>\n                                <Typography className={classes.typo} variant=\"subtitle1\" color=\"textSecondary\"> One Rep Max </Typography>\n                                <Typography className={classes.daysTypo} gutterBottom variant=\"h5\" component=\"h1\"> {countGymDays()} </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Card style={{ height: \"20vh\" }}>\n                            <CardContent>\n                                <Typography className={classes.typo} variant=\"subtitle1\" color=\"textSecondary\"> Personal Best </Typography>\n                                {state.personalbest.length === 0 ?\n                                    <Typography className={classes.daysTypo} gutterBottom variant=\"h5\" component=\"h1\"> No Workout Selected </Typography> :\n                                    <div>\n                                        <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                                            <Typography display=\"inline\" className={classes.daysTypo} gutterBottom variant=\"h5\" component=\"h1\">\n                                                {state.personalbest.weight} lbs\n                                             </Typography>\n                                            <Typography display=\"inline\" className={classes.typo} variant=\"subtitle1\" color=\"textSecondary\">\n                                                / {state.personalbest.rep} reps\n                                                </Typography>\n                                        </div>\n                                        <Typography className={classes.typo} variant=\"subtitle1\" color=\"textSecondary\">\n                                            Set on - {state.personalbest.date}\n                                        </Typography>\n                                    </div>\n                                }\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n    {/* <Grid ref={targetRef} className={classes.gymContainer} item xs={(props.tabIndex === 0) ? 8 : 12} >\n                {createTabPanel()}\n            </Grid>\n            <Grid className={classes.gymSelection} item xs={4}>\n               \n            </Grid> */}\n}"]},"metadata":{},"sourceType":"module"}