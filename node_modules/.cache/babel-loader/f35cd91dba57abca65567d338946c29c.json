{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React from 'react'; // import recharts\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Bar, Cell } from 'recharts'; // import material ui core \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport styles from '../../assets/styles/views/dashboard/dashgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  };\n\n  const getData = () => {\n    if (props.data === []) {\n      return [{\n        \"date\": \"\",\n        \"weight\": 0\n      }];\n    }\n  };\n\n  function CustomLabel({\n    x,\n    y,\n    stroke,\n    value,\n    width\n  }) {\n    if (value) {\n      // No label if there is a value. Let the cell handle it.\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y // Move slightly above axis\n      ,\n      dy: -10 // Center text\n      ,\n      dx: width / 2,\n      fill: stroke,\n      fontSize: 15,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"STUFF\");\n  }\n\n  let data = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 500,\n    height: 400,\n    data: getData,\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"weight\",\n    domain: ['auto', 'auto'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 0,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    name: titleCase(\"temp\"),\n    type: \"monotone\",\n    dataKey: \"weight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Bar","Cell","makeStyles","Paper","Button","styles","useStyles","DashGraph","props","classes","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","getData","data","CustomLabel","x","y","stroke","value","width","paper","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// import recharts\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Bar, Cell\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport styles from '../../assets/styles/views/dashboard/dashgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n\n    const classes = useStyles();\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    const getData = () => {\n        if (props.data === []) {\n            return ([\n                {\n                    \"date\": \"\",\n                    \"weight\": 0\n                }\n            ]);\n        }\n    }\n    function CustomLabel({ x, y, stroke, value, width }) {\n        if (value) {\n            // No label if there is a value. Let the cell handle it.\n            return null;\n        }\n\n        return (\n            <text\n                x={x}\n                y={y}\n                // Move slightly above axis\n                dy={-10}\n                // Center text\n                dx={width / 2}\n                fill={stroke}\n                fontSize={15}\n                textAnchor=\"middle\"\n            >\n               STUFF\n            </text>\n        )\n    }\n\n    let data = [{},{},{},{},{},{},{},{},{},{},{},{},{},{},]\n    return (\n        <Paper className={classes.paper}>\n            <LineChart width={500} height={400} data={getData}\n                margin={{ top: 30, right: 50, left: 20, bottom: 5 }}>\n                <XAxis dataKey=\"date\" />\n                <YAxis dataKey=\"weight\" domain={['auto', 'auto']} />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Legend height={36} wrapperStyle={{ top: 0, left: 25 }} />\n                <Line name={titleCase(\"temp\")} type=\"monotone\" dataKey=\"weight\" />\n            </LineChart>\n        </Paper>\n    );\n}"]},"metadata":{},"sourceType":"module"}