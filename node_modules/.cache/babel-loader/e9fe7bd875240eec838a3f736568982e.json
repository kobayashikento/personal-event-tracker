{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend } from 'recharts'; // import material ui core \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n  const targetRef = useRef(); // states\n\n  const [state, setState] = React.useState({\n    width: 0,\n    height: 0\n  });\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setState({ ...state,\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredByDate = props.data.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: [workout.data.map(data => {\n        if (moment(data.date).isBetween(props.start, props.end)) {\n          return {\n            data\n          };\n        }\n      })]\n    };\n  });\n\n  const getData = () => {\n    if (filteredByDate.length === 0) {\n      return [{\n        \"time\": 1503617297689,\n        \"value\": 0\n      }, {\n        \"time\": 1503616962277,\n        \"value\": 0\n      }, {\n        \"time\": 1503616882654,\n        \"value\": 0\n      }];\n    } else {\n      let chartData = [];\n      filteredByDate.map(data => {\n        chartData.push(data.workoutdata[0]);\n      });\n      console.log(chartData[0]);\n      return chartData;\n    }\n  };\n\n  const getLabel = () => {\n    if (props.data.length === 0) {\n      return \"No data\";\n    } else {\n      props.data.map(arr => {\n        return arr.name;\n      });\n    }\n  }; // style\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    data: getData(),\n    className: classes.chart,\n    width: state.width,\n    height: state.height,\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('HH:mm Do'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Scatter, {\n    data: getData,\n    line: {\n      stroke: '#eee'\n    },\n    lineJointType: \"monotoneX\",\n    lineType: \"joint\",\n    name: \"Values\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 30,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","makeStyles","Paper","moment","styles","useStyles","DashGraph","props","classes","targetRef","state","setState","useState","width","height","current","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","filteredByDate","data","map","workout","name","workoutdata","date","isBetween","start","end","getData","chartData","push","console","log","getLabel","arr","paper","chart","top","right","left","bottom","unixTime","format","stroke"],"mappings":"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","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend,\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n    const targetRef = useRef();\n\n    // states\n    const [state, setState] = React.useState({\n        width: 0,\n        height: 0,\n    });\n\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setState({\n                ...state,\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = props.data.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata: [\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(props.start, props.end)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n            ]\n        };\n    })\n\n    const getData = () => {\n        if (filteredByDate.length === 0) {\n            return ([\n                {\n                    \"time\": 1503617297689,\n                    \"value\": 0\n                },\n                {\n                    \"time\": 1503616962277,\n                    \"value\": 0\n                },\n                {\n                    \"time\": 1503616882654,\n                    \"value\": 0\n                },\n            ]);\n        } else {\n            let chartData = []\n            filteredByDate.map(data => {\n                chartData.push(data.workoutdata[0])\n            })\n            console.log(chartData[0])\n            return chartData\n        }\n    }\n\n    const getLabel = () => {\n        if (props.data.length === 0) {\n            return (\"No data\");\n        } else {\n            props.data.map((arr) => {\n                return (\n                    arr.name\n                );\n            })\n        }\n    }\n    // style\n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            <ScatterChart data={getData()}\n                className={classes.chart}\n                width={state.width} height={state.height}\n                margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                <XAxis dataKey='time'\n                    domain={['auto', 'auto']}\n                    name='Time'\n                    tickFormatter={(unixTime) => moment(unixTime).format('HH:mm Do')}\n                    type='number'\n                />\n                <YAxis dataKey='value' name='Value' />\n                <Scatter\n                    data={getData}\n                    line={{ stroke: '#eee' }}\n                    lineJointType='monotoneX'\n                    lineType='joint'\n                    name='Values'\n                />\n                <Tooltip />\n                <Legend height={36} wrapperStyle={{ top: 30, left: 25 }} />\n            </ScatterChart>\n        </Paper>\n\n\n    );\n}"]},"metadata":{},"sourceType":"module"}