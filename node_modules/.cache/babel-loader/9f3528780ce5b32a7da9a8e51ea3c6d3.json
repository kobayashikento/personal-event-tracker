{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend } from 'recharts'; // import material ui core \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport { map } from 'jquery';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n  const targetRef = useRef(); // states\n\n  const [state, setState] = React.useState({\n    width: 0,\n    height: 0\n  });\n  React.useEffect(() => {\n    if (targetRef.current) {\n      setState({ ...state,\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredByDate = props.data.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: workout.data.map(data => {\n        if (moment(data.date).isBetween(props.start, props.end)) {\n          return {\n            data\n          };\n        }\n      })\n    };\n  });\n\n  const getData = () => {\n    if (filteredByDate.length === 0) {\n      return /*#__PURE__*/React.createElement(Scatter, {\n        data: [{\n          \"time\": moment().subtract(2, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().subtract(1, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().valueOf(),\n          \"value\": 0\n        }],\n        line: {\n          stroke: props.theme.colors.primary\n        },\n        lineJointType: \"monotoneX\",\n        lineType: \"joint\",\n        legendType: \"line\",\n        name: \"No Data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return filteredByDate.map((prop, key) => {\n        if (!prop.workoutdata.includes(undefined)) {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            key: key,\n            data: prop.workoutdata.map(workout => {\n              return {\n                \"time\": moment(workout.data.date).valueOf(),\n                \"value\": workout.data.weight\n              };\n            }),\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"circle\",\n            name: prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            data: [],\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"line\",\n            name: \"Not Enough Data for \" + prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }\n          });\n        }\n      });\n    }\n  }; // style\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, console.log(state.width, state.height), /*#__PURE__*/React.createElement(ScatterChart, {\n    className: classes.chart,\n    width: state.width,\n    height: state.height,\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('MM-DD-YYYY'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Weight\",\n    domain: ['auto', 'auto'],\n    unit: \"lbs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), getData(), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 30,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","makeStyles","Paper","moment","RemoveIcon","styles","map","useStyles","DashGraph","props","classes","targetRef","state","setState","useState","width","height","useEffect","current","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","filteredByDate","data","workout","name","workoutdata","date","isBetween","start","end","getData","subtract","valueOf","stroke","theme","colors","primary","prop","key","includes","undefined","weight","paper","console","log","chart","top","right","left","bottom","unixTime","format"],"mappings":"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","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend,\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport { map } from 'jquery';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n    const targetRef = useRef();\n\n    // states\n    const [state, setState] = React.useState({\n        width: 0,\n        height: 0,\n    });\n\n    React.useEffect(() => {\n        if (targetRef.current) {\n            setState({\n                ...state,\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = props.data.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata:\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(props.start, props.end)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n        };\n    })\n\n    const getData = () => {\n        if (filteredByDate.length === 0) {\n            return (\n                <Scatter\n                    data={[\n                        {\n                            \"time\": moment().subtract(2, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().subtract(1, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().valueOf(),\n                            \"value\": 0\n                        },\n                    ]}\n                    line={{ stroke: props.theme.colors.primary }}\n                    lineJointType='monotoneX'\n                    lineType='joint'\n                    legendType=\"line\"\n                    name={\"No Data\"}\n                />\n            );\n        } else {\n            return (\n                filteredByDate.map((prop, key) => {\n                    if (!prop.workoutdata.includes(undefined)) {\n                        return (\n                            <Scatter\n                                key={key}\n                                data={\n                                    prop.workoutdata.map(workout => {\n                                        return {\n                                            \"time\": moment(workout.data.date).valueOf(),\n                                            \"value\": workout.data.weight\n                                        }\n                                    })\n                                }\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"circle\"\n                                name={prop.name}\n                            />\n                        );\n                    } else {\n                        return (\n                            <Scatter\n                                data={[]}\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"line\"\n                                name={\"Not Enough Data for \" + prop.name}\n                            />\n                        );\n                    }\n                })\n            );\n        }\n    }\n    // style\n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            {console.log(state.width, state.height)}\n            <ScatterChart\n                className={classes.chart}\n                width={state.width} height={state.height}\n                margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                <XAxis dataKey='time'\n                    domain={['auto', 'auto']}\n                    name='Time'\n                    tickFormatter={(unixTime) => moment(unixTime).format('MM-DD-YYYY')}\n                    type='number'\n                />\n                <YAxis dataKey='value' name='Weight' domain={['auto', 'auto']} unit=\"lbs\"/>\n                {getData()}\n                <Tooltip />\n                <Legend height={36} wrapperStyle={{ top: 30, left: 25 }} />\n            </ScatterChart>\n        </Paper>\n\n\n    );\n}"]},"metadata":{},"sourceType":"module"}