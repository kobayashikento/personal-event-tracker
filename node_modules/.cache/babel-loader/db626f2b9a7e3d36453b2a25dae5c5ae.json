{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles(); // states\n\n  const targetRef = useRef();\n  const [dimensions, setDimensions] = React.useState({\n    width: 0,\n    height: 0\n  });\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setDimensions({\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  };\n\n  const tableData = props.data.map(prop => {\n    if (props.data.length === 0) {\n      return [{\n        \"date\": \"2020-01-11\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-12\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-13\",\n        \"weight\": 0\n      }];\n    } else {\n      return props.data;\n    }\n  });\n\n  const getLabel = () => {\n    if (props.data.length === 0) {\n      return \"No data\";\n    } else {\n      props.data.map(arr => {\n        return arr.name;\n      });\n    }\n  }; // style \n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: dimensions.width,\n    height: dimensions.height,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: tableData,\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"weight\",\n    domain: ['auto', 'auto'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 0,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    name: getLabel(),\n    type: \"monotone\",\n    dataKey: \"weight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","makeStyles","withStyles","Paper","Button","styles","useStyles","DashGraph","props","classes","targetRef","dimensions","setDimensions","useState","width","height","current","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","tableData","data","map","prop","getLabel","arr","name","paper","container","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n\n    // states\n    const targetRef = useRef();\n    const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 });\n\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setDimensions({\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    const tableData = props.data.map((prop) => {\n        if (props.data.length === 0) {\n            return ([\n                {\n                    \"date\": \"2020-01-11\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-12\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-13\",\n                    \"weight\": 0\n                },\n            ]);\n        } else {\n            return (\n                props.data\n            );\n        }\n    })\n\n    const getLabel = () => {\n        if (props.data.length === 0) {\n            return (\"No data\");\n        } else {\n             props.data.map((arr) => {\n                return (\n                    arr.name\n                );\n            })\n        }\n    }\n    // style \n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            <ResponsiveContainer width={dimensions.width} height={dimensions.height} className={classes.container}>\n                <LineChart data={tableData}\n                    margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis dataKey=\"weight\" domain={['auto', 'auto']} />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 0, left: 25 }} />\n                    <Line name={getLabel()} type=\"monotone\" dataKey=\"weight\" />\n                </LineChart>\n            </ResponsiveContainer>\n        </Paper>\n    );\n}"]},"metadata":{},"sourceType":"module"}