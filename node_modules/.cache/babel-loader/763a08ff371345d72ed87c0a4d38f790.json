{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymView.js\";\nimport React from 'react';\nimport { useRef, useLayoutEffect } from 'react'; // import material ui cores \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid'; // generate random events for the calendar \n\nimport data from '../../assets/data/dashEvents.json';\nimport styles from '../../assets/styles/views/gym/gymStyle.js';\nimport moment from 'moment';\nimport GymSelection from './GymSelection.js';\nimport GymContainer from './GymContainer.js';\nconst useStyles = makeStyles(styles);\nexport default function GymView(props) {\n  const classes = useStyles();\n  const targetRef = useRef(); //states \n\n  const [state, setState] = React.useState({\n    selectedData: [],\n    selectedStartDate: moment().subtract(29, 'days'),\n    selectedEndDate: moment(),\n    width: 0,\n    height: 0\n  }); // react state for tabs \n\n  const handleDataSelection = data => {\n    setState({ ...state,\n      selectedData: data\n    });\n  };\n\n  const handleDateChange = (start, end) => {\n    setState({ ...state,\n      selectedStartDate: start,\n      selectedEndDate: end\n    });\n  };\n\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setState({ ...state,\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.container,\n    spacing: 6,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gymContainer,\n    item: true,\n    xs: props.tabIndex === 0 ? 9 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GymContainer, {\n    tabIndex: props.tabIndex,\n    handleTabChange: value => props.handleTabChange(value),\n    selectedData: state.selectedData,\n    start: state.selectedStartDate,\n    end: state.selectedEndDate,\n    theme: props.theme,\n    height: state.height,\n    width: state.height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gymSelection,\n    item: true,\n    xs: props.tabIndex === 0 ? 3 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GymSelection, {\n    handleDataSelection: data => handleDataSelection(data),\n    theme: props.theme,\n    start: state.selectedStartDate,\n    end: state.selectedEndDate,\n    handleDateChange: (start, end) => handleDateChange(start, end),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymView.js"],"names":["React","useRef","useLayoutEffect","makeStyles","Grid","data","styles","moment","GymSelection","GymContainer","useStyles","GymView","props","classes","targetRef","state","setState","useState","selectedData","selectedStartDate","subtract","selectedEndDate","width","height","handleDataSelection","handleDateChange","start","end","current","offsetWidth","offsetHeight","container","gymContainer","tabIndex","value","handleTabChange","theme","gymSelection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useRef, useLayoutEffect } from 'react'\n\n// import material ui cores \nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n// generate random events for the calendar \nimport data from '../../assets/data/dashEvents.json';\n\nimport styles from '../../assets/styles/views/gym/gymStyle.js';\n\nimport moment from 'moment';\n\nimport GymSelection from './GymSelection.js';\nimport GymContainer from './GymContainer.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function GymView(props) {\n    const classes = useStyles();\n    const targetRef = useRef();\n    //states \n    const [state, setState] = React.useState({\n        selectedData: [],\n        selectedStartDate: moment().subtract(29, 'days'),\n        selectedEndDate: moment(),\n        width: 0, height: 0\n    })\n\n    // react state for tabs \n    const handleDataSelection = (data) => {\n        setState({ ...state, selectedData: data })\n    };\n    const handleDateChange = (start, end) => {\n        setState({ ...state, selectedStartDate: start, selectedEndDate: end })\n    };\n\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setState({\n                ...state,\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n\n    }, [])\n\n    return (\n        <Grid\n            container\n            className={classes.container}\n            spacing={6}\n            ref={targetRef}\n        >\n            <Grid className={classes.gymContainer} item xs={(props.tabIndex === 0) ? 9 : 12} >\n                <GymContainer\n                    tabIndex={props.tabIndex}\n                    handleTabChange={(value) => props.handleTabChange(value)}\n                    selectedData={state.selectedData}\n                    start={state.selectedStartDate}\n                    end={state.selectedEndDate}\n                    theme={props.theme}\n                    height={state.height}\n                    width={state.height}\n                />\n            </Grid>\n            <Grid className={classes.gymSelection} item xs={(props.tabIndex === 0) ? 3 : 0}>\n                <GymSelection\n                    handleDataSelection={(data) => handleDataSelection(data)}\n                    theme={props.theme}\n                    start={state.selectedStartDate}\n                    end={state.selectedEndDate}\n                    handleDateChange={(start, end) => handleDateChange(start, end)}\n                />\n            </Grid>\n        </Grid>\n    );\n}"]},"metadata":{},"sourceType":"module"}