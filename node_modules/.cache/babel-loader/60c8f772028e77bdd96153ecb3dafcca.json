{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React from 'react';\nimport { titleCase } from '../../assets/styles/masterStyle.js'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment'; // import material ui icons \n\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport workoutData from '../../assets/data/gymData.json';\nimport GymSelection from './GymSelection.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles(); //states\n\n  const [state, setState] = React.useState({\n    selectedData: [],\n    selectedStartWeek: moment().subtract(14, 'days'),\n    selectedEndWeek: moment()\n  });\n\n  const handleWeekChange = direction => {\n    if (direction === 'right' && !state.selectedEndWeek.isSame(moment())) {\n      setState({ ...state,\n        selectedEndWeek: state.selectedEndWeek.add(14, 'days')\n      });\n      setState({ ...state,\n        selectedStartWeek: state.selectedStartWeek.add(14, 'days')\n      });\n    } else if (direction === 'left') {\n      setState({ ...state,\n        selectedEndWeek: state.selectedEndWeek.subtract(14, 'days')\n      });\n      setState({ ...state,\n        selectedStartWeek: state.selectedStartWeek.subtract(14, 'days')\n      });\n    }\n  };\n\n  const handleDataSelection = data => {\n    setState({ ...state,\n      selectedData: data\n    });\n  };\n\n  const handleDateChange = (start, end) => {\n    setState({ ...state,\n      selectedStartDate: start,\n      selectedEndDate: end\n    });\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredByDate = state.selectedData.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: workout.data.map(data => {\n        if (moment(data.date).isBetween(state.selectedStartDate, state.selectedEndDate)) {\n          return {\n            data\n          };\n        }\n      })\n    };\n  });\n\n  const getScatterData = () => {\n    if (filteredByDate.length === 0) {\n      return /*#__PURE__*/React.createElement(Scatter, {\n        data: [],\n        line: {\n          stroke: props.theme.colors.primary\n        },\n        lineJointType: \"monotoneX\",\n        lineType: \"joint\",\n        legendType: \"line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return filteredByDate.map((prop, key) => {\n        if (!prop.workoutdata.includes(undefined)) {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            key: key,\n            data: prop.workoutdata.map(workout => {\n              return {\n                \"time\": moment(workout.data.date).valueOf(),\n                \"value\": workout.data.weight\n              };\n            }),\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"circle\",\n            name: prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            data: [],\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"line\",\n            name: \"Not Enough Data for \" + prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }\n          });\n        }\n      });\n    }\n  }; // style\n\n\n  const options = workoutData.map(option => {\n    return {\n      name: titleCase(option.workout.name),\n      group: titleCase(option.workout.musclegroup),\n      ...option\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"76vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      marginTop: \"32px\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      marginLeft: \"16px\"\n    },\n    onClick: () => handleWeekChange('left'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginRight: \"5vw\",\n      marginLeft: \"5vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h1\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, state.selectedStartWeek.format('MMMM D'), \" - \", state.selectedEndWeek.format('MMMM D')), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textAlign: \"center\",\n      padding: \"8px\"\n    },\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"Total Entries\")), /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      marginRight: \"16px\"\n    },\n    onClick: () => handleWeekChange('right'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ChevronRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    minHeight: 100,\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    className: classes.chart,\n    margin: {\n      top: 0,\n      right: 24,\n      left: 12,\n      bottom: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('MM-DD-YYYY'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Weight\",\n    domain: ['auto', 'auto'],\n    unit: \"lbs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }), getScatterData(), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 30,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }))));\n  {\n    /* <GymSelection\n               handleDataSelection={(data) => handleDataSelection(data)}\n               theme={props.theme}\n               start={state.selectedStartDate}\n               end={state.selectedEndDate}\n               handleDateChange={(start, end) => handleDateChange(start, end)}\n           /> */\n  }\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","titleCase","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","ResponsiveContainer","IconButton","Typography","Autocomplete","TextField","makeStyles","moment","ChevronLeftIcon","ChevronRightIcon","styles","workoutData","GymSelection","useStyles","DashGraph","props","classes","state","setState","useState","selectedData","selectedStartWeek","subtract","selectedEndWeek","handleWeekChange","direction","isSame","add","handleDataSelection","data","handleDateChange","start","end","selectedStartDate","selectedEndDate","filteredByDate","map","workout","name","workoutdata","date","isBetween","getScatterData","length","stroke","theme","colors","primary","prop","key","includes","undefined","valueOf","weight","options","option","group","musclegroup","display","flexDirection","height","marginTop","marginLeft","marginRight","textAlign","format","padding","chart","top","right","left","bottom","unixTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    titleCase\n} from '../../assets/styles/masterStyle.js';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\n\n// import material ui icons \nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport workoutData from '../../assets/data/gymData.json'\nimport GymSelection from './GymSelection.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n\n    //states\n    const [state, setState] = React.useState(\n        {\n            selectedData: [],\n            selectedStartWeek: moment().subtract(14, 'days'),\n            selectedEndWeek: moment(),\n        }\n    )\n    const handleWeekChange = (direction) => {\n        if (direction === 'right' && !state.selectedEndWeek.isSame(moment())) {\n            setState({ ...state, selectedEndWeek: state.selectedEndWeek.add(14, 'days') });\n            setState({ ...state, selectedStartWeek: state.selectedStartWeek.add(14, 'days') });\n        } else if (direction === 'left') {\n            setState({ ...state, selectedEndWeek: state.selectedEndWeek.subtract(14, 'days') });\n            setState({ ...state, selectedStartWeek: state.selectedStartWeek.subtract(14, 'days') });\n        }\n    }\n    const handleDataSelection = (data) => {\n        setState({ ...state, selectedData: data })\n    };\n    const handleDateChange = (start, end) => {\n        setState({ ...state, selectedStartDate: start, selectedEndDate: end })\n    };\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = state.selectedData.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata:\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(state.selectedStartDate, state.selectedEndDate)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n        };\n    })\n\n    const getScatterData = () => {\n        if (filteredByDate.length === 0) {\n            return (\n                <Scatter\n                    data={[]}\n                    line={{ stroke: props.theme.colors.primary }}\n                    lineJointType='monotoneX'\n                    lineType='joint'\n                    legendType=\"line\"\n                />\n            );\n        } else {\n            return (\n                filteredByDate.map((prop, key) => {\n                    if (!prop.workoutdata.includes(undefined)) {\n                        return (\n                            <Scatter\n                                key={key}\n                                data={\n                                    prop.workoutdata.map(workout => {\n                                        return {\n                                            \"time\": moment(workout.data.date).valueOf(),\n                                            \"value\": workout.data.weight\n                                        }\n                                    })\n                                }\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"circle\"\n                                name={prop.name}\n                            />\n                        );\n                    } else {\n                        return (\n                            <Scatter\n                                data={[]}\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"line\"\n                                name={\"Not Enough Data for \" + prop.name}\n                            />\n                        );\n                    }\n                })\n            );\n        }\n    }\n    // style\n    const options = workoutData.map((option) => {\n        return {\n            name: titleCase(option.workout.name), group: titleCase(option.workout.musclegroup),\n            ...option\n        };\n    });\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", height: \"76vh\" }}>\n            <div style={{ display: \"flex\", marginTop: \"32px\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n                <IconButton style={{ marginLeft: \"16px\" }} onClick={() => handleWeekChange('left')}>\n                    <ChevronLeftIcon />\n                </IconButton>\n                <div style={{ marginRight: \"5vw\", marginLeft: \"5vw\" }}>\n                    <Typography variant=\"h5\" component=\"h1\" style={{ textAlign: \"center\" }}>\n                        {state.selectedStartWeek.format('MMMM D')} - {state.selectedEndWeek.format('MMMM D')}\n                    </Typography>\n                    <Typography style={{ textAlign: \"center\", padding: \"8px\" }} variant=\"subtitle1\" color=\"textSecondary\">\n                        Total Entries\n                    </Typography>\n                </div>\n                <IconButton style={{ marginRight: \"16px\" }} onClick={() => handleWeekChange('right')}>\n                    <ChevronRightIcon />\n                </IconButton>\n            </div>\n            <ResponsiveContainer minHeight={100} width=\"100%\" height=\"100%\">\n                <ScatterChart\n                    className={classes.chart}\n                    margin={{ top: 0, right: 24, left: 12, bottom: 30 }}>\n                    <XAxis dataKey='time'\n                        domain={['auto', 'auto']}\n                        name='Time'\n                        tickFormatter={(unixTime) => moment(unixTime).format('MM-DD-YYYY')}\n                        type='number'\n                    />\n                    <YAxis dataKey='value' name='Weight' domain={['auto', 'auto']} unit=\"lbs\" />\n                    {getScatterData()}\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 30, left: 25 }} />\n                </ScatterChart>\n            </ResponsiveContainer>\n        </div>\n    );\n    {/* <GymSelection\n                handleDataSelection={(data) => handleDataSelection(data)}\n                theme={props.theme}\n                start={state.selectedStartDate}\n                end={state.selectedEndDate}\n                handleDateChange={(start, end) => handleDateChange(start, end)}\n            /> */}\n}"]},"metadata":{},"sourceType":"module"}