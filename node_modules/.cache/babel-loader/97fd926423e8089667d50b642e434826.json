{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React from 'react'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles(); // function that selects data based on the selected workout and date range \n\n  const filteredByDate = props.data.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: workout.data.map(data => {\n        if (moment(data.date).isBetween(props.start, props.end)) {\n          return {\n            data\n          };\n        }\n      })\n    };\n  });\n\n  const getData = () => {\n    if (filteredByDate.length === 0) {\n      return /*#__PURE__*/React.createElement(Scatter, {\n        data: [{\n          \"time\": moment().subtract(2, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().subtract(1, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().valueOf(),\n          \"value\": 0\n        }],\n        line: {\n          stroke: props.theme.colors.primary\n        },\n        lineJointType: \"monotoneX\",\n        lineType: \"joint\",\n        legendType: \"line\",\n        name: \"No Data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return filteredByDate.map((prop, key) => {\n        if (!prop.workoutdata.includes(undefined)) {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            key: key,\n            data: prop.workoutdata.map(workout => {\n              return {\n                \"time\": moment(workout.data.date).valueOf(),\n                \"value\": workout.data.weight\n              };\n            }),\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"circle\",\n            name: prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(Scatter, {\n            data: [],\n            line: {\n              stroke: props.theme.colors.primary\n            },\n            lineJointType: \"monotoneX\",\n            lineType: \"joint\",\n            legendType: \"line\",\n            name: \"Not Enough Data for \" + prop.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }\n          });\n        }\n      });\n    }\n  }; // style\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"40vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    minHeight: 100,\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    className: classes.chart,\n    margin: {\n      top: 30,\n      right: 20,\n      left: 20,\n      bottom: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('MM-DD-YYYY'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Weight\",\n    domain: ['auto', 'auto'],\n    unit: \"lbs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }), getData(), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 30,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","ResponsiveContainer","makeStyles","Paper","moment","styles","useStyles","DashGraph","props","classes","filteredByDate","data","map","workout","name","workoutdata","date","isBetween","start","end","getData","length","subtract","valueOf","stroke","theme","colors","primary","prop","key","includes","undefined","weight","height","width","chart","top","right","left","bottom","unixTime","format"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = props.data.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata:\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(props.start, props.end)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n        };\n    })\n\n    const getData = () => {\n        if (filteredByDate.length === 0) {\n            return (\n                <Scatter\n                    data={[\n                        {\n                            \"time\": moment().subtract(2, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().subtract(1, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().valueOf(),\n                            \"value\": 0\n                        },\n                    ]}\n                    line={{ stroke: props.theme.colors.primary }}\n                    lineJointType='monotoneX'\n                    lineType='joint'\n                    legendType=\"line\"\n                    name={\"No Data\"}\n                />\n            );\n        } else {\n            return (\n                filteredByDate.map((prop, key) => {\n                    if (!prop.workoutdata.includes(undefined)) {\n                        return (\n                            <Scatter\n                                key={key}\n                                data={\n                                    prop.workoutdata.map(workout => {\n                                        return {\n                                            \"time\": moment(workout.data.date).valueOf(),\n                                            \"value\": workout.data.weight\n                                        }\n                                    })\n                                }\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"circle\"\n                                name={prop.name}\n                            />\n                        );\n                    } else {\n                        return (\n                            <Scatter\n                                data={[]}\n                                line={{ stroke: props.theme.colors.primary }}\n                                lineJointType='monotoneX'\n                                lineType='joint'\n                                legendType=\"line\"\n                                name={\"Not Enough Data for \" + prop.name}\n                            />\n                        );\n                    }\n                })\n            );\n        }\n    }\n    // style\n\n    return (\n        <div style={{ height: \"75vh\", width: \"40vw\" }}>\n            <ResponsiveContainer minHeight={100} width=\"100%\" height=\"100%\">\n                <ScatterChart\n                    className={classes.chart}\n                    margin={{ top: 30, right: 20, left: 20, bottom: 30 }}>\n                    <XAxis dataKey='time'\n                        domain={['auto', 'auto']}\n                        name='Time'\n                        tickFormatter={(unixTime) => moment(unixTime).format('MM-DD-YYYY')}\n                        type='number'\n                    />\n                    <YAxis dataKey='value' name='Weight' domain={['auto', 'auto']} unit=\"lbs\" />\n                    {getData()}\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 30, left: 25 }} />\n                </ScatterChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}