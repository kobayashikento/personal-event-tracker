{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React from 'react';\nimport { titleCase } from '../../assets/styles/masterStyle.js'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment'; // import material ui icons \n\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport dog from '../../assets/images/15224-cute-doggie.gif';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n  let numEntries = 0; //states\n\n  const [state, setState] = React.useState({\n    selectedStart: props.start,\n    selectedEnd: props.end\n  });\n\n  const handleWeekChange = direction => {\n    if (direction === 'right' && !state.selectedEnd.isSame(moment())) {\n      setState({ ...state,\n        selectedEnd: state.selectedEnd.add(props.amount, props.type)\n      });\n      setState({ ...state,\n        selectedStart: state.selectedStart.add(props.amount, props.type)\n      });\n    } else if (direction === 'left') {\n      setState({ ...state,\n        selectedEnd: state.selectedEnd.subtract(props.amount, props.type)\n      });\n      setState({ ...state,\n        selectedStart: state.selectedStart.subtract(props.amount, props.type)\n      });\n    }\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredByDate = () => {\n    if (props.selectedData.length === 0) {\n      return [];\n    } else {\n      return {\n        name: props.selectedData.name,\n        workoutdata: props.selectedData.data.map(data => {\n          if (moment(data.date).isBetween(state.selectedStart, state.selectedEnd)) {\n            return {\n              data\n            };\n          }\n        })\n      };\n    }\n  };\n\n  const getScatterData = () => {\n    numEntries = 0; // if (filteredByDate.=== 0) {\n    //     return (\n    //         <Scatter\n    //             data={[]}\n    //             line={{ stroke: props.theme.colors.primary }}\n    //             lineJointType='monotoneX'\n    //             lineType='joint'\n    //             legendType=\"line\"\n    //         />\n    //     );\n    // } else {\n    //     return (\n    //         filteredByDate.map((prop, key) => {\n    //             if (!prop.workoutdata.includes(undefined)) {\n    //                 numEntries = numEntries + 1;\n    //                 return (\n    //                     <Scatter\n    //                         key={key}\n    //                         data={\n    //                             prop.workoutdata.map(workout => {\n    //                                 return {\n    //                                     \"time\": moment(workout.data.date).valueOf(),\n    //                                     \"value\": workout.data.weight\n    //                                 }\n    //                             })\n    //                         }\n    //                         line={{ stroke: props.theme.colors.primary }}\n    //                         lineJointType='monotoneX'\n    //                         lineType='joint'\n    //                         legendType=\"circle\"\n    //                         fill={props.theme.colors.secondary}\n    //                         name={\" \" + prop.name}\n    //                     />\n    //                 );\n    //             } else {\n    //                 return (\n    //                     <Scatter\n    //                         key={key}\n    //                         data={[]}\n    //                         line={{ stroke: props.theme.colors.primary }}\n    //                         lineJointType='monotoneX'\n    //                         lineType='joint'\n    //                         legendType=\"line\"\n    //                     />\n    //                 );\n    //             }\n    //         })\n    //     );\n    //}\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"76vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      marginTop: \"32px\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      marginLeft: \"16px\"\n    },\n    onClick: () => handleWeekChange('left'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginRight: \"5vw\",\n      marginLeft: \"5vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h1\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, state.selectedStart.format('MMMM D'), \" - \", state.selectedEnd.format('MMMM D')), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textAlign: \"center\",\n      padding: \"8px\"\n    },\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, numEntries, \" - Total Entries\")), /*#__PURE__*/React.createElement(IconButton, {\n    style: {\n      marginRight: \"16px\"\n    },\n    onClick: () => handleWeekChange('right'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ChevronRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    minHeight: 100,\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    className: classes.chart,\n    margin: {\n      top: 0,\n      right: 45,\n      left: 24,\n      bottom: 54\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('MM-DD-YYYY'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Weight\",\n    domain: ['auto', 'auto'],\n    unit: \"lbs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 10,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","titleCase","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","ResponsiveContainer","IconButton","Typography","Autocomplete","TextField","makeStyles","moment","ChevronLeftIcon","ChevronRightIcon","styles","dog","useStyles","DashGraph","props","classes","numEntries","state","setState","useState","selectedStart","start","selectedEnd","end","handleWeekChange","direction","isSame","add","amount","type","subtract","filteredByDate","selectedData","length","name","workoutdata","data","map","date","isBetween","getScatterData","display","flexDirection","height","marginTop","marginLeft","marginRight","textAlign","format","padding","chart","top","right","left","bottom","unixTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    titleCase\n} from '../../assets/styles/masterStyle.js';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\n\n// import material ui icons \nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nimport dog from '../../assets/images/15224-cute-doggie.gif';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n    let numEntries = 0;\n    //states\n    const [state, setState] = React.useState(\n        {\n            selectedStart: props.start,\n            selectedEnd: props.end,\n        }\n    )\n    const handleWeekChange = (direction) => {\n        if (direction === 'right' && !state.selectedEnd.isSame(moment())) {\n            setState({ ...state, selectedEnd: state.selectedEnd.add(props.amount, props.type) });\n            setState({ ...state, selectedStart: state.selectedStart.add(props.amount, props.type) });\n        } else if (direction === 'left') {\n            setState({ ...state, selectedEnd: state.selectedEnd.subtract(props.amount, props.type) });\n            setState({ ...state, selectedStart: state.selectedStart.subtract(props.amount, props.type) });\n        }\n    }\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = () => {\n        if (props.selectedData.length === 0) {\n            return []\n        } else {\n            return {\n                name: props.selectedData.name,\n                workoutdata:\n                    props.selectedData.data.map(data => {\n                        if (moment(data.date).isBetween(state.selectedStart, state.selectedEnd)) {\n                            return {\n                                data\n                            };\n                        }\n                    })\n            };\n        }\n    }\n\n    const getScatterData = () => {\n        numEntries = 0;\n        // if (filteredByDate.=== 0) {\n        //     return (\n        //         <Scatter\n        //             data={[]}\n        //             line={{ stroke: props.theme.colors.primary }}\n        //             lineJointType='monotoneX'\n        //             lineType='joint'\n        //             legendType=\"line\"\n        //         />\n        //     );\n        // } else {\n        //     return (\n        //         filteredByDate.map((prop, key) => {\n        //             if (!prop.workoutdata.includes(undefined)) {\n        //                 numEntries = numEntries + 1;\n        //                 return (\n        //                     <Scatter\n        //                         key={key}\n        //                         data={\n        //                             prop.workoutdata.map(workout => {\n        //                                 return {\n        //                                     \"time\": moment(workout.data.date).valueOf(),\n        //                                     \"value\": workout.data.weight\n        //                                 }\n        //                             })\n        //                         }\n        //                         line={{ stroke: props.theme.colors.primary }}\n        //                         lineJointType='monotoneX'\n        //                         lineType='joint'\n        //                         legendType=\"circle\"\n        //                         fill={props.theme.colors.secondary}\n        //                         name={\" \" + prop.name}\n        //                     />\n        //                 );\n        //             } else {\n        //                 return (\n        //                     <Scatter\n        //                         key={key}\n        //                         data={[]}\n        //                         line={{ stroke: props.theme.colors.primary }}\n        //                         lineJointType='monotoneX'\n        //                         lineType='joint'\n        //                         legendType=\"line\"\n        //                     />\n        //                 );\n        //             }\n        //         })\n        //     );\n        //}\n    }\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", height: \"76vh\" }}>\n            <div style={{ display: \"flex\", marginTop: \"32px\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n                <IconButton style={{ marginLeft: \"16px\" }} onClick={() => handleWeekChange('left')}>\n                    <ChevronLeftIcon />\n                </IconButton>\n                <div style={{ marginRight: \"5vw\", marginLeft: \"5vw\" }}>\n                    <Typography variant=\"h5\" component=\"h1\" style={{ textAlign: \"center\" }}>\n                        {state.selectedStart.format('MMMM D')} - {state.selectedEnd.format('MMMM D')}\n                    </Typography>\n                    <Typography style={{ textAlign: \"center\", padding: \"8px\" }} variant=\"subtitle1\" color=\"textSecondary\">\n                        {numEntries} - Total Entries\n                    </Typography>\n                </div>\n                <IconButton style={{ marginRight: \"16px\" }} onClick={() => handleWeekChange('right')}>\n                    <ChevronRightIcon />\n                </IconButton>\n            </div>\n            {/* {getScatterData()[0] === undefined || getScatterData()[0].props.data.length === 0 ?\n                <div>\n                    <Typography style={{ marginTop: \"25%\", textAlign: \"center\" }} variant=\"subtitle1\" component=\"h1\" color=\"textSecondary\">\n                        No Data Available\n                    </Typography>\n                    <img className={classes.run} src={dog} />\n                </div>\n                : null} */}\n            <ResponsiveContainer minHeight={100} width=\"100%\" height=\"100%\">\n                <ScatterChart\n                    className={classes.chart}\n                    margin={{ top: 0, right: 45, left: 24, bottom: 54 }}>\n                    <XAxis dataKey='time'\n                        domain={['auto', 'auto']}\n                        name='Time'\n                        tickFormatter={(unixTime) => moment(unixTime).format('MM-DD-YYYY')}\n                        type='number'\n                    />\n                    <YAxis dataKey='value' name='Weight' domain={['auto', 'auto']} unit=\"lbs\" />\n                    {/* {getScatterData()} */}\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 10, left: 25 }} />\n                </ScatterChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}