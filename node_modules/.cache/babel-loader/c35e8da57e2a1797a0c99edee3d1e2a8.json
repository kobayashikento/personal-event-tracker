{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend } from 'recharts'; // import material ui core \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport { map } from 'jquery';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n  const targetRef = useRef(); // states\n\n  const [state, setState] = React.useState({\n    width: 0,\n    height: 0\n  });\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setState({ ...state,\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredByDate = props.data.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: workout.data.map(data => {\n        if (moment(data.date).isBetween(props.start, props.end)) {\n          return {\n            data\n          };\n        }\n      })\n    };\n  });\n\n  const getData = () => {\n    if (filteredByDate.length === 0) {\n      console.log( /*#__PURE__*/React.createElement(Scatter, {\n        data: [{\n          \"time\": moment().subtract(2, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().subtract(1, 'days').valueOf(),\n          \"value\": 0\n        }, {\n          \"time\": moment().valueOf(),\n          \"value\": 0\n        }],\n        line: {\n          stroke: props.theme.colors.primary\n        },\n        lineJointType: \"monotoneX\",\n        lineType: \"joint\",\n        legendType: \"line\",\n        name: \"No Data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      filteredByDate.map(prop => {\n        console.log( /*#__PURE__*/React.createElement(Scatter, {\n          data: prop.workoutdata.map(workout => {\n            return {\n              \"time\": moment(workout.data.date).valueOf(),\n              \"value\": workout.data.weight\n            };\n          }),\n          line: {\n            stroke: props.theme.colors.primary\n          },\n          lineJointType: \"monotoneX\",\n          lineType: \"joint\",\n          legendType: \"line\",\n          name: prop.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }\n        }));\n      });\n    }\n  }; // style\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ScatterChart, {\n    className: classes.chart,\n    width: state.width,\n    height: state.height,\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    domain: ['auto', 'auto'],\n    name: \"Time\",\n    tickFormatter: unixTime => moment(unixTime).format('MM-DD-YYYY'),\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    name: \"Value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), getData(), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 30,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","ScatterChart","XAxis","YAxis","Scatter","Tooltip","Legend","makeStyles","Paper","moment","RemoveIcon","styles","map","useStyles","DashGraph","props","classes","targetRef","state","setState","useState","width","height","current","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","filteredByDate","data","workout","name","workoutdata","date","isBetween","start","end","getData","console","log","subtract","valueOf","stroke","theme","colors","primary","prop","weight","paper","chart","top","right","left","bottom","unixTime","format"],"mappings":"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","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    ScatterChart, XAxis, YAxis, Scatter, Tooltip, Legend,\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nimport { map } from 'jquery';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n    const targetRef = useRef();\n\n    // states\n    const [state, setState] = React.useState({\n        width: 0,\n        height: 0,\n    });\n\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setState({\n                ...state,\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    // function that selects data based on the selected workout and date range \n    const filteredByDate = props.data.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata:\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(props.start, props.end)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n        };\n    })\n\n    const getData = () => {\n        if (filteredByDate.length === 0) {\n            console.log (\n                <Scatter\n                    data={[\n                        {\n                            \"time\": moment().subtract(2, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().subtract(1, 'days').valueOf(),\n                            \"value\": 0\n                        },\n                        {\n                            \"time\": moment().valueOf(),\n                            \"value\": 0\n                        },\n                    ]}\n                    line={{ stroke: props.theme.colors.primary }}\n                    lineJointType='monotoneX'\n                    lineType='joint'\n                    legendType=\"line\"\n                    name={\"No Data\"}\n                />\n            );\n        } else {\n            filteredByDate.map(prop => {\n                console.log (\n                    <Scatter\n                        data={\n                            prop.workoutdata.map(workout =>{\n                                return {\n                                    \"time\": moment(workout.data.date).valueOf(),\n                                    \"value\": workout.data.weight\n                                }\n                            })\n                        }\n                        line={{ stroke: props.theme.colors.primary }}\n                        lineJointType='monotoneX'\n                        lineType='joint'\n                        legendType=\"line\"\n                        name={prop.name}\n                    />\n                );\n            })\n        }\n    }\n    // style\n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            <ScatterChart\n                className={classes.chart}\n                width={state.width} height={state.height}\n                margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                <XAxis dataKey='time'\n                    domain={['auto', 'auto']}\n                    name='Time'\n                    tickFormatter={(unixTime) => moment(unixTime).format('MM-DD-YYYY')}\n                    type='number'\n                />\n                <YAxis dataKey='value' name='Value' />\n                {getData()}\n                <Tooltip />\n                <Legend height={36} wrapperStyle={{ top: 30, left: 25 }} />\n            </ScatterChart>\n        </Paper>\n\n\n    );\n}"]},"metadata":{},"sourceType":"module"}