{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/DashBoard/DashBoardView.js\";\nimport React from 'react'; // import material ui cores \n\nimport { makeStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { useTheme } from '@material-ui/core/styles';\nimport styles from '../../assets/styles/views/dashboardStyle.js';\nimport DashContainer from './DashContainer.js';\nimport DashGraph from './DashGraph.js'; // import function used to generate the arrays for the calendar\n\nimport gymData from '../../assets/data/gymData.json';\nimport workRoutine from '../../assets/data/workoutRoutine.json';\nconst useStyles = makeStyles(styles);\nexport default function DashBoardView(props) {\n  const classes = useStyles();\n  const theme = useTheme(styles);\n  const matches = useMediaQuery(theme.breakpoints.up('sm')); // set states\n  // need to have a json file that keeps tracks of current workout day probably a user setting file\n\n  const [currWorkout, setWorkout] = React.useState(workRoutine[0].workouts[0]);\n  const [activeAccordIndex, setActiveAccordIndex] = React.useState(0);\n  const [state, setState] = React.useState({\n    checkedSwitch: false\n  }, {\n    currGymData: gymData[0]\n  });\n\n  const handleSwitchChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleIndexChange = index => {\n    if (activeAccordIndex === index) {\n      setActiveAccordIndex(0);\n    } else {\n      setActiveAccordIndex(index);\n    }\n  };\n\n  React.useEffect(() => {\n    var gymdata;\n    gymData.map(data => {\n      if (data.workout.name === currWorkout.workout.name) {\n        gymdata = data;\n      }\n    });\n    setState(gymdata);\n  }, [currWorkout]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: (\"section\", classes.section),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: (\"square\", classes.square),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DashContainer, {\n    theme: props.theme,\n    handleIndexChange: index => handleIndexChange(index),\n    handleSwitchChange: event => handleSwitchChange(event),\n    state: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-col-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tall-rect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, activeAccordIndex === 1 && !state.checkedSwitch && matches && /*#__PURE__*/React.createElement(DashGraph, {\n    gymData: state.currGymData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wide-rect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/DashBoard/DashBoardView.js"],"names":["React","makeStyles","useMediaQuery","Typography","Divider","useTheme","styles","DashContainer","DashGraph","gymData","workRoutine","useStyles","DashBoardView","props","classes","theme","matches","breakpoints","up","currWorkout","setWorkout","useState","workouts","activeAccordIndex","setActiveAccordIndex","state","setState","checkedSwitch","currGymData","handleSwitchChange","event","target","name","checked","handleIndexChange","index","useEffect","gymdata","map","data","workout","container","section","square"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// import material ui cores \nimport { makeStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport styles from '../../assets/styles/views/dashboardStyle.js';\nimport DashContainer from './DashContainer.js';\nimport DashGraph from './DashGraph.js';\n\n// import function used to generate the arrays for the calendar\nimport gymData from '../../assets/data/gymData.json';\nimport workRoutine from '../../assets/data/workoutRoutine.json';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashBoardView(props) {\n    const classes = useStyles();\n    const theme = useTheme(styles);\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n    // set states\n    // need to have a json file that keeps tracks of current workout day probably a user setting file\n    const [currWorkout, setWorkout] = React.useState(workRoutine[0].workouts[0]);\n    const [activeAccordIndex, setActiveAccordIndex] = React.useState(0);\n\n    const [state, setState] = React.useState({ checkedSwitch: false },{currGymData: gymData[0]});\n\n    const handleSwitchChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n    const handleIndexChange = (index) => {\n        if (activeAccordIndex === index) {\n            setActiveAccordIndex(0);\n        } else {\n            setActiveAccordIndex(index);\n        }\n    }\n\n    React.useEffect(() => {\n        var gymdata;\n        gymData.map((data) => {\n            if(data.workout.name===currWorkout.workout.name){\n                gymdata = data;\n            }\n        })\n        setState(gymdata);\n    },[currWorkout]);\n\n    return (\n        <div className={classes.container}>\n            <section className={\"section\", classes.section}>\n                <div className={\"square\", classes.square }>\n                    <DashContainer\n                        theme={props.theme}\n                        handleIndexChange={(index) => handleIndexChange(index)}\n                        handleSwitchChange={(event) => handleSwitchChange(event)}\n                        state={state}\n                    />\n                </div>\n                <div className=\"flex-col-2\">\n                    <div className=\"tall-rect\">\n                        {(activeAccordIndex === 1) && !state.checkedSwitch && matches &&\n                            <DashGraph\n                                gymData={state.currGymData}\n                            />\n                        }\n                    </div>\n                    <div className=\"wide-rect\">\n\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}