{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles();\n  const targetRef = useRef(); // states\n\n  const [state, setState] = React.useState({\n    width: 0,\n    height: 0,\n    popover: null\n  });\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setState({ ...states,\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  }; // function that selects data based on the selected workout and date range \n\n\n  const filteredData = props.data.map(workout => {\n    return {\n      name: workout.name,\n      workoutdata: [workout.data.map(data => {\n        if (moment(data.date).isBetween(props.start, props.end)) {\n          return {\n            data\n          };\n        }\n      })]\n    };\n  });\n\n  const getData = () => {\n    if (filteredData.length === 0) {\n      return [{\n        \"date\": \"2020-01-11\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-12\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-13\",\n        \"weight\": 0\n      }];\n    } else {\n      let tableData = [];\n      props.data.map(arr => {\n        tableData.push(arr.data);\n      });\n      return tableData;\n    }\n  };\n\n  const getLabel = () => {\n    if (props.data.length === 0) {\n      return \"No data\";\n    } else {\n      props.data.map(arr => {\n        return arr.name;\n      });\n    }\n  }; // style\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: dimensions.width,\n    height: dimensions.height,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: getData(),\n    margin: {\n      top: 30,\n      right: 50,\n      left: 20,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"weight\",\n    domain: ['auto', 'auto'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    height: 36,\n    wrapperStyle: {\n      top: 0,\n      left: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    name: getLabel(),\n    type: \"monotone\",\n    dataKey: \"weight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","makeStyles","withStyles","Paper","Button","moment","styles","useStyles","DashGraph","props","classes","targetRef","state","setState","useState","width","height","popover","handleClick","event","setAnchorEl","currentTarget","current","states","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","filteredData","data","map","workout","name","workoutdata","date","isBetween","start","end","getData","tableData","arr","push","getLabel","paper","dimensions","container","top","right","left","bottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,eAAxB,QAA+C,OAA/C,C,CAEA;;AACA,SACIC,SADJ,EACeC,IADf,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,aADnC,EACkDC,OADlD,EAC2DC,MAD3D,EACmEC,mBADnE,QAEO,UAFP,C,CAIA;;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,MAAP,MAAmB,gDAAnB;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAACK,MAAD,CAA5B;AAEA,eAAe,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACrC,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,QAAMI,SAAS,GAAGpB,MAAM,EAAxB,CAFqC,CAIrC;;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBvB,KAAK,CAACwB,QAAN,CAAe;AACrCC,IAAAA,KAAK,EAAE,CAD8B;AAErCC,IAAAA,MAAM,EAAE,CAF6B;AAGrCC,IAAAA,OAAO,EAAE;AAH4B,GAAf,CAA1B;;AAKA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3BC,IAAAA,WAAW,CAACD,KAAK,CAACE,aAAP,CAAX;AACH,GAFD;;AAGA7B,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAImB,SAAS,CAACW,OAAd,EAAuB;AACnBT,MAAAA,QAAQ,CAAC,EACL,GAAGU,MADE;AAELR,QAAAA,KAAK,EAAEJ,SAAS,CAACW,OAAV,CAAkBE,WAFpB;AAGLR,QAAAA,MAAM,EAAEL,SAAS,CAACW,OAAV,CAAkBG;AAHrB,OAAD,CAAR;AAKH;AACJ,GARc,EAQZ,EARY,CAAf;;AAUA,QAAMC,SAAS,GAAIC,GAAD,IAAS;AACvB,QAAIC,QAAQ,GAAGD,GAAG,CAACE,WAAJ,GAAkBC,KAAlB,CAAwB,GAAxB,CAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCH,MAAAA,QAAQ,CAACG,CAAD,CAAR,GAAcH,QAAQ,CAACG,CAAD,CAAR,CAAYE,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,KAAsCN,QAAQ,CAACG,CAAD,CAAR,CAAYI,SAAZ,CAAsB,CAAtB,CAApD;AACH;;AACD,WAAOP,QAAQ,CAACQ,IAAT,CAAc,GAAd,CAAP;AACH,GAND,CAvBqC,CA+BrC;;;AACA,QAAMC,YAAY,GAAG5B,KAAK,CAAC6B,IAAN,CAAWC,GAAX,CAAeC,OAAO,IAAI;AAC3C,WAAO;AACHC,MAAAA,IAAI,EAAED,OAAO,CAACC,IADX;AAEHC,MAAAA,WAAW,EAAE,CACTF,OAAO,CAACF,IAAR,CAAaC,GAAb,CAAiBD,IAAI,IAAI;AACrB,YAAIjC,MAAM,CAACiC,IAAI,CAACK,IAAN,CAAN,CAAkBC,SAAlB,CAA4BnC,KAAK,CAACoC,KAAlC,EAAyCpC,KAAK,CAACqC,GAA/C,CAAJ,EAAyD;AACrD,iBAAO;AACHR,YAAAA;AADG,WAAP;AAGH;AACJ,OAND,CADS;AAFV,KAAP;AAYH,GAboB,CAArB;;AAgBA,QAAMS,OAAO,GAAG,MAAM;AAClB,QAAIV,YAAY,CAACL,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,aAAQ,CACJ;AACI,gBAAQ,YADZ;AAEI,kBAAU;AAFd,OADI,EAKJ;AACI,gBAAQ,YADZ;AAEI,kBAAU;AAFd,OALI,EASJ;AACI,gBAAQ,YADZ;AAEI,kBAAU;AAFd,OATI,CAAR;AAcH,KAfD,MAeO;AACH,UAAIgB,SAAS,GAAG,EAAhB;AACAvC,MAAAA,KAAK,CAAC6B,IAAN,CAAWC,GAAX,CAAgBU,GAAD,IAAS;AACpBD,QAAAA,SAAS,CAACE,IAAV,CAAeD,GAAG,CAACX,IAAnB;AACH,OAFD;AAGA,aAAQU,SAAR;AACH;AACJ,GAvBD;;AAyBA,QAAMG,QAAQ,GAAG,MAAM;AACnB,QAAI1C,KAAK,CAAC6B,IAAN,CAAWN,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAQ,SAAR;AACH,KAFD,MAEO;AACHvB,MAAAA,KAAK,CAAC6B,IAAN,CAAWC,GAAX,CAAgBU,GAAD,IAAS;AACpB,eACIA,GAAG,CAACR,IADR;AAGH,OAJD;AAKH;AACJ,GAVD,CAzEqC,CAoFrC;;;AAEA,sBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE/B,OAAO,CAAC0C,KAA1B;AAAiC,IAAA,GAAG,EAAEzC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE0C,UAAU,CAACtC,KAAvC;AAA8C,IAAA,MAAM,EAAEsC,UAAU,CAACrC,MAAjE;AAAyE,IAAA,SAAS,EAAEN,OAAO,CAAC4C,SAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEP,OAAO,EAAxB;AACI,IAAA,MAAM,EAAE;AAAEQ,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,IAAI,EAAE,EAA5B;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAII,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAKI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAMI,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,EAAhB;AAAoB,IAAA,YAAY,EAAE;AAAEH,MAAAA,GAAG,EAAE,CAAP;AAAUE,MAAAA,IAAI,EAAE;AAAhB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEN,QAAQ,EAApB;AAAwB,IAAA,IAAI,EAAC,UAA7B;AAAwC,IAAA,OAAO,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ,CADJ,CADJ;AAeH","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n    const targetRef = useRef();\n\n    // states\n    const [state, setState] = React.useState({\n        width: 0,\n        height: 0,\n        popover: null\n    });\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setState({\n                ...states,\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    // function that selects data based on the selected workout and date range \n    const filteredData = props.data.map(workout => {\n        return {\n            name: workout.name,\n            workoutdata: [\n                workout.data.map(data => {\n                    if (moment(data.date).isBetween(props.start, props.end)) {\n                        return {\n                            data\n                        };\n                    }\n                })\n            ]\n        };\n    })\n\n\n    const getData = () => {\n        if (filteredData.length === 0) {\n            return ([\n                {\n                    \"date\": \"2020-01-11\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-12\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-13\",\n                    \"weight\": 0\n                },\n            ]);\n        } else {\n            let tableData = []\n            props.data.map((arr) => {\n                tableData.push(arr.data)\n            })\n            return (tableData);\n        }\n    }\n\n    const getLabel = () => {\n        if (props.data.length === 0) {\n            return (\"No data\");\n        } else {\n            props.data.map((arr) => {\n                return (\n                    arr.name\n                );\n            })\n        }\n    }\n    // style\n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            <ResponsiveContainer width={dimensions.width} height={dimensions.height} className={classes.container}>\n                <LineChart data={getData()}\n                    margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis dataKey=\"weight\" domain={['auto', 'auto']} />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 0, left: 25 }} />\n                    <Line name={getLabel()} type=\"monotone\" dataKey=\"weight\" />\n                </LineChart>\n            </ResponsiveContainer>\n        </Paper>\n    );\n}"]},"metadata":{},"sourceType":"module"}