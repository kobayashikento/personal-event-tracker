{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js\";\nimport React, { useRef, useLayoutEffect } from 'react'; // import recharts\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // import material ui core \n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\nconst useStyles = makeStyles(styles);\nexport default function DashGraph(props) {\n  const classes = useStyles(); // states\n\n  const targetRef = useRef();\n  const [dimensions, setDimensions] = React.useState({\n    width: 0,\n    height: 0\n  });\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      setDimensions({\n        width: targetRef.current.offsetWidth,\n        height: targetRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  const titleCase = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n\n    return splitStr.join(' ');\n  };\n\n  const getData = () => {\n    if (props.data.length === 0) {\n      return [{\n        \"date\": \"2020-01-11\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-12\",\n        \"weight\": 0\n      }, {\n        \"date\": \"2020-01-13\",\n        \"weight\": 0\n      }];\n    } else {\n      let tableData = [];\n      props.data.map(arr => {\n        tableData.push(arr.data);\n      });\n      return tableData;\n    }\n  };\n\n  const getLabel = () => {\n    if (props.data.length === 0) {\n      return \"No data\";\n    } else {\n      props.data.map(arr => {\n        return arr.name;\n      });\n    }\n  }; // style\n\n\n  const data = [{\n    \"name\": \"Page A\",\n    \"uv\": 4000,\n    \"pv\": 2400,\n    \"amt\": 2400\n  }, {\n    \"name\": \"Page B\",\n    \"uv\": 3000,\n    \"pv\": 5000,\n    \"amt\": 2210\n  }, {\n    \"name\": \"Page C\",\n    \"uv\": 1500,\n    \"pv\": 9800,\n    \"amt\": 2290\n  }, {\n    \"name\": \"Page D\",\n    \"uv\": 2000,\n    \"pv\": 9800,\n    \"amt\": 2290\n  }];\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: dimensions.width,\n    height: dimensions.height,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 730,\n    height: 250,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"pv\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"uv\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"amt\",\n    stroke: \"#82cd8d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/Gym/GymGraph.js"],"names":["React","useRef","useLayoutEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","makeStyles","withStyles","Paper","Button","styles","useStyles","DashGraph","props","classes","targetRef","dimensions","setDimensions","useState","width","height","current","offsetWidth","offsetHeight","titleCase","str","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","getData","data","tableData","map","arr","push","getLabel","name","paper","container","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\n\n// import recharts\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\n\n// import material ui core \nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport styles from '../../assets/styles/views/gym/gymgraphStyle.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashGraph(props) {\n    const classes = useStyles();\n\n    // states\n    const targetRef = useRef();\n    const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 });\n\n    useLayoutEffect(() => {\n        if (targetRef.current) {\n            setDimensions({\n                width: targetRef.current.offsetWidth,\n                height: targetRef.current.offsetHeight\n            });\n        }\n    }, []);\n\n    const titleCase = (str) => {\n        var splitStr = str.toLowerCase().split(' ');\n        for (var i = 0; i < splitStr.length; i++) {\n            splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n        }\n        return splitStr.join(' ');\n    }\n\n    const getData = () => {\n        if (props.data.length === 0) {\n            return ([\n                {\n                    \"date\": \"2020-01-11\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-12\",\n                    \"weight\": 0\n                },\n                {\n                    \"date\": \"2020-01-13\",\n                    \"weight\": 0\n                },\n            ]);\n        } else {\n            let tableData = []\n            props.data.map((arr) => {\n                tableData.push(arr.data)\n            })\n            return (tableData);\n        }\n    }\n\n    const getLabel = () => {\n        if (props.data.length === 0) {\n            return (\"No data\");\n        } else {\n            props.data.map((arr) => {\n                return (\n                    arr.name\n                );\n            })\n        }\n    }\n    // style\n\n    const data = [\n        {\n            \"name\": \"Page A\",\n            \"uv\": 4000,\n            \"pv\": 2400,\n            \"amt\": 2400\n        },\n        {\n            \"name\": \"Page B\",\n            \"uv\": 3000,\n            \"pv\": 5000,\n            \"amt\": 2210\n        },\n        {\n            \"name\": \"Page C\",\n            \"uv\": 1500,\n            \"pv\": 9800,\n            \"amt\": 2290\n        },\n        {\n            \"name\": \"Page D\",\n            \"uv\": 2000,\n            \"pv\": 9800,\n            \"amt\": 2290\n        },\n    ]\n\n    return (\n        <Paper className={classes.paper} ref={targetRef} >\n            <ResponsiveContainer width={dimensions.width} height={dimensions.height} className={classes.container}>\n                <LineChart width={730} height={250} data={data}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" />\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n                    <Line type=\"monotone\" dataKey=\"amt\" stroke=\"#82cd8d\" />\n                </LineChart>\n                {/* <LineChart data={getData()}\n                    margin={{ top: 30, right: 50, left: 20, bottom: 0 }}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis dataKey=\"weight\" domain={['auto', 'auto']} />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend height={36} wrapperStyle={{ top: 0, left: 25 }} />\n                    <Line name={getLabel()} type=\"monotone\" dataKey=\"weight\" />\n                </LineChart> */}\n            </ResponsiveContainer>\n        </Paper>\n    );\n}"]},"metadata":{},"sourceType":"module"}