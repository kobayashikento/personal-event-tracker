{"ast":null,"code":"var _jsxFileName = \"/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/DashBoard/DashBoardView.js\";\nimport React, { Fragment } from 'react'; // import material ui cores \n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport styles from '../../assets/styles/views/dashboard/dashboardStyle.js';\nimport DashContainer from './DashContainer.js';\nimport DashGraph from './DashGraph.js'; // import function used to generate the arrays for the calendar\n\nimport gymData from '../../assets/data/gymData.json';\nimport workRoutine from '../../assets/data/workoutRoutine.json';\nimport CountDownTimer from '../../components/CountDownTimer.js';\nimport InputForm from './GymInputForm.js';\nconst useStyles = makeStyles(styles);\nexport default function DashBoardView(props) {\n  const classes = useStyles();\n  const theme = useTheme(styles);\n  const matches = useMediaQuery(theme.breakpoints.up('sm')); // set states\n  // need to have a json file that keeps tracks of current workout day probably a user setting file\n\n  const [activeAccordIndex, setActiveAccordIndex] = React.useState(0);\n  const [selectedCell, setSelectedCell] = React.useState(1);\n  const [state, setState] = React.useState({\n    checkedSwitch: false,\n    currGymData: gymData[0],\n    currWorkout: workRoutine[0].workouts[0],\n    routine: workRoutine[0]\n  });\n\n  const handleSwitchChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleCellChange = cell => {\n    setSelectedCell(cell);\n  };\n\n  const handleIndexChange = index => {\n    if (activeAccordIndex === index) {\n      setActiveAccordIndex(0);\n    } else {\n      setActiveAccordIndex(index);\n    }\n  };\n\n  React.useEffect(() => {\n    var gymdata = state.currGymData;\n    gymData.map(data => {\n      if (data.workout.name === state.routine.workouts[selectedCell - 1].workout.name) {\n        gymdata = data;\n      }\n    });\n    setState({ ...state,\n      currGymData: gymdata,\n      currWorkout: state.routine.workouts[selectedCell - 1]\n    });\n  }, [selectedCell]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DashContainer, {\n    theme: props.theme,\n    handleIndexChange: index => handleIndexChange(index),\n    handleSwitchChange: event => handleSwitchChange(event),\n    state: state,\n    selectedCell: selectedCell,\n    handleCellChange: cell => handleCellChange(cell),\n    checkedSwitch: state.checkedSwitch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kentokobaysahi/Documents/GitHub/personal-event-tracker/personal-event-tracker/src/views/DashBoard/DashBoardView.js"],"names":["React","Fragment","makeStyles","useTheme","useMediaQuery","Grid","styles","DashContainer","DashGraph","gymData","workRoutine","CountDownTimer","InputForm","useStyles","DashBoardView","props","classes","theme","matches","breakpoints","up","activeAccordIndex","setActiveAccordIndex","useState","selectedCell","setSelectedCell","state","setState","checkedSwitch","currGymData","currWorkout","workouts","routine","handleSwitchChange","event","target","name","checked","handleCellChange","cell","handleIndexChange","index","useEffect","gymdata","map","data","workout","container"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\n// import material ui cores \nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\n\nimport styles from '../../assets/styles/views/dashboard/dashboardStyle.js';\nimport DashContainer from './DashContainer.js';\nimport DashGraph from './DashGraph.js';\n\n// import function used to generate the arrays for the calendar\nimport gymData from '../../assets/data/gymData.json';\nimport workRoutine from '../../assets/data/workoutRoutine.json';\nimport CountDownTimer from '../../components/CountDownTimer.js';\nimport InputForm from './GymInputForm.js';\n\nconst useStyles = makeStyles(styles);\n\nexport default function DashBoardView(props) {\n    const classes = useStyles();\n    const theme = useTheme(styles);\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n    // set states\n    // need to have a json file that keeps tracks of current workout day probably a user setting file\n    const [activeAccordIndex, setActiveAccordIndex] = React.useState(0);\n    const [selectedCell, setSelectedCell] = React.useState(1);\n    const [state, setState] = React.useState(\n        {\n            checkedSwitch: false,\n            currGymData: gymData[0],\n            currWorkout: workRoutine[0].workouts[0],\n            routine: workRoutine[0]\n        });\n\n    const handleSwitchChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n    const handleCellChange = (cell) => {\n        setSelectedCell(cell);\n    }\n\n    const handleIndexChange = (index) => {\n        if (activeAccordIndex === index) {\n            setActiveAccordIndex(0);\n        } else {\n            setActiveAccordIndex(index);\n        }\n    }\n    React.useEffect(() => {\n        var gymdata = state.currGymData;\n        gymData.map((data) => {\n            if (data.workout.name === state.routine.workouts[selectedCell - 1].workout.name) {\n                gymdata = data;\n            }\n        })\n        setState({ ...state, currGymData: gymdata, currWorkout: state.routine.workouts[selectedCell - 1] });\n    }, [selectedCell])\n\n\n    return (\n        <Grid\n            container\n            className={classes.container}\n        >\n            <Grid item xs={8} >\n                <DashContainer\n                    theme={props.theme}\n                    handleIndexChange={(index) => handleIndexChange(index)}\n                    handleSwitchChange={(event) => handleSwitchChange(event)}\n                    state={state}\n                    selectedCell={selectedCell}\n                    handleCellChange={(cell) => handleCellChange(cell)}\n                    checkedSwitch={state.checkedSwitch}\n                />\n            </Grid>\n            {/* {(activeAccordIndex === 1) && !state.checkedSwitch && matches &&\n                        <DashGraph\n                            handleListItemClick={(index) => props.handleListItemClick(index)}\n                            gymData={state.currGymData}\n                            routes={props.routes}\n                            theme={props.theme}\n                        />\n                    }\n                    {state.checkedSwitch && matches &&\n                        <Fragment>\n                            <CountDownTimer />\n                            <InputForm\n                                workouts={state.currWorkout}\n                                routine={state.routine}\n                            />\n                        </Fragment>\n                    } */}\n        </Grid>\n    );\n}"]},"metadata":{},"sourceType":"module"}